공이 바닥에 튀기는 탄성을 구현했습니다.

공이 바닥에 튀는 현상은 여러 물리적 원리가 복합적으로 작용한 결과입니다:
탄성 에너지 저장과 방출 이라는 관점에서 

1. 공이 바닥에 부딪힐 때 순간적으로 변형됩니다.
2. 이 변형 과정에서 운동 에너지가 탄성 에너지로 저장됩니다.
3. 공이 원래 형태로 돌아가면서 저장된 탄성 에너지가 다시 운동 에너지로 전환되어 공이 튀어오릅니다.

그러나 에너지 손실은 필연적으로 발생합니다.
완벽한 탄성 충돌은 현실에서 불가능하며, 항상 약간의 에너지 손실이 있습니다.
이로 인해 공은 원래 높이보다 조금 낮게 튀어오릅니다.

공과 바닥의 재질에 따라 탄성과 마찰 정도가 달라져 튀는 높이가 달라집니다.
실제 게임 환경이라면 재질에 따른 탄성계수를 다르게 해서 재미 요소를 찾을 수 있을 겁니다.

#2 Triangle - Circle Collision을 구현해봤습니다.

시간적인 한계로 약간의 버그가 있지만, 삼각형과 공들이 각각 모서리에 부딪혔을 경우, 내부에 있을 경우
면에 부딪혔을 경우를 케이스를 분류하여 색깔로 알 수 잇게 만들어 봤습니다.

추후 이 기능을 완성시켜 날카로운 물체의 부분에 터지는 풍선과 같은 기능 구현이 가능할 것 같습니ㅏ.

********************** 기존 과제에 대한 ReadMe입니다. 코드 적인 채점이 필요하실 경우에 참고하시면 좋을 것 같습니다!*******************************************



UBall 적합한 vertexBuffer를 설정합니다. 이는 Shpere VertexBuffer와 동일합니다.

UBall Class를 통해 Ball의 속성을 정의합니다.

InitializeRandomValues(), SetMassProportionalToSize() 함수를 통해
초기 설정 및 초기 설정에 따른 Mass 값을 설정합니다.
// Position, Velocity, Radius를 랜덤하게 설정합니다.
// 사이드 물체가 발생하는 케이스를 방지하기 위해 랜덤값을 조정합니다.


//Collision 및 Gravity를 UBall 클래스에서 설정합니다.

// UBallList Class를 통해 Ball의 리스트를 관리합니다.

int numBalls 변수를 통해 존재 가능한 Ball의 숫자를 조정합니다.
InputInt 값을 통해 공의 갯수 증감을 설정합니다.

//MainLoop 내에서 ImGui 의 변경 상태를 확인 후,
//공의 증감을 파악합니다.
//이후 생성/소멸 작업을 List를 통해 처리합니다.

//ConstantBuffer를 통한 이동 제어가 기본적인 함수이지만
// 현재 프로그램에서 RenderPrimite의 추가적인 함수 설정 없이
// Location + offset 의 형식으로 구성합니다.
// UBall에 관한 데이터를 렌더링 요청합니다.
